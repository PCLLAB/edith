[1mdiff --git a/components/FileViewer/ExperimentCards/DataDownloadCard.tsx b/components/FileViewer/ExperimentCards/DataDownloadCard.tsx[m
[1mindex 17308d4..ed6e357 100644[m
[1m--- a/components/FileViewer/ExperimentCards/DataDownloadCard.tsx[m
[1m+++ b/components/FileViewer/ExperimentCards/DataDownloadCard.tsx[m
[36m@@ -25,6 +25,7 @@[m [mimport { useDialogContext } from "../../../lib/client/context/DialogContext";[m
 import { useBoundStore } from "../../../lib/client/hooks/stores/useBoundStore";[m
 import { ExperimentJson } from "../../../lib/common/types/models";[m
 import { ExplorerDialog } from "../../../pages/explorer";[m
[32m+[m[32mimport dayjs from "dayjs";[m
 [m
 type CardProps = {[m
   exp: ExperimentJson;[m
[36m@@ -52,14 +53,27 @@[m [mexport const DataDownloadCard = ({ exp }: CardProps) => {[m
     },[m
   });[m
 [m
[31m-  const onSubmit = handleSubmit(async ({ skip, limit, startDate, endDate }) => {[m
[31m-    setLoading(true);[m
[31m-    await getData(exp._id, {[m
[32m+[m[32m  const queryData = ({[m
[32m+[m[32m    skip,[m
[32m+[m[32m    limit,[m
[32m+[m[32m    startDate,[m
[32m+[m[32m    endDate,[m
[32m+[m[32m  }: {[m
[32m+[m[32m    skip: string;[m
[32m+[m[32m    limit: string;[m
[32m+[m[32m    startDate: dayjs.Dayjs | null;[m
[32m+[m[32m    endDate: dayjs.Dayjs | null;[m
[32m+[m[32m  }) => {[m
[32m+[m[32m    return getData(exp._id, {[m
       skip: dirtyFields.skip ? parseInt(skip) : undefined,[m
       limit: dirtyFields.limit ? parseInt(limit) : undefined,[m
       startDate: dirtyFields.startDate ? startDate.toISOString() : undefined,[m
       endDate: dirtyFields.endDate ? endDate.toISOString() : undefined,[m
     });[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const onSubmit = handleSubmit(async () => {[m
[32m+[m[32m    setLoading(true);[m
     setLoading(false);[m
     openDialog("DATA", { id: exp._id }, { maxWidth: "xl" });[m
   });[m
[36m@@ -67,35 +81,33 @@[m [mexport const DataDownloadCard = ({ exp }: CardProps) => {[m
   const DownloadOptions = [[m
     {[m
       name: "Download as CSV",[m
[31m-      onClick: handleSubmit(async ({ skip, limit, startDate, endDate }) => {[m
[31m-        const entries = await getData(exp._id, {[m
[31m-          skip: dirtyFields.skip ? parseInt(skip) : undefined,[m
[31m-          limit: dirtyFields.limit ? parseInt(limit) : undefined,[m
[31m-          startDate: dirtyFields.startDate[m
[31m-            ? startDate.toISOString()[m
[31m-            : undefined,[m
[31m-          endDate: dirtyFields.endDate ? endDate.toISOString() : undefined,[m
[32m+[m[32m      onClick: handleSubmit(async (options) => {[m
[32m+[m[32m        const entries = await queryData(options);[m
[32m+[m
[32m+[m[32m        const rows = entries.flatMap((entry) => entry.data);[m
[32m+[m
[32m+[m[32m        const colSet = new Set<string>();[m
[32m+[m[32m        rows.forEach((row) => {[m
[32m+[m[32m          Object.keys(row).forEach((key) => colSet.add(key));[m
         });[m
[32m+[m[32m        const cols = Array.from(colSet);[m
 [m
[31m-        const a = document.createElement("a");[m
[31m-        a.href = URL.createObjectURL([m
[31m-          new Blob([JSON.stringify(entries)], { type: "text/csv" })[m
[32m+[m[32m        const csvList = rows.map((row) =>[m
[32m+[m[32m          cols.map((col) => (col in row ? row[col] : "")).join(",")[m
         );[m
[32m+[m[32m        csvList.unshift(cols.join(","));[m
[32m+[m[32m        const csv = csvList.join("\r\n");[m
[32m+[m
[32m+[m[32m        const a = document.createElement("a");[m
[32m+[m[32m        a.href = URL.createObjectURL(new Blob([csv], { type: "text/csv" }));[m
         a.download = "test_title.csv";[m
         a.click();[m
       }),[m
     },[m
     {[m
       name: "Download as JSON",[m
[31m-      onClick: handleSubmit(async ({ skip, limit, startDate, endDate }) => {[m
[31m-        const entries = await getData(exp._id, {[m
[31m-          skip: dirtyFields.skip ? parseInt(skip) : undefined,[m
[31m-          limit: dirtyFields.limit ? parseInt(limit) : undefined,[m
[31m-          startDate: dirtyFields.startDate[m
[31m-            ? startDate.toISOString()[m
[31m-            : undefined,[m
[31m-          endDate: dirtyFields.endDate ? endDate.toISOString() : undefined,[m
[31m-        });[m
[32m+[m[32m      onClick: handleSubmit(async (options) => {[m
[32m+[m[32m        const entries = await queryData(options);[m
 [m
         const a = document.createElement("a");[m
         a.href = URL.createObjectURL([m
